数据压缩意味着发送或存储更少的位数，这些方法一般可分为两类，无损压缩和有损压缩
	无损压缩
		游程长度编码
		赫夫曼编码
		LZ编码
	有损压缩
		JPEG
		MPEG
		MP3
无损压缩方法
	在无损数据压缩中，原始数据与压缩和解压后的数据完全一样，在这种压缩方法中，压缩和解压算法是完全互反的两个过程
	在处理过程中没有数据丢失，冗余的数据在压缩时被移走，在解压时再被加回去
	这种方法在不想丢失数据时使用，例如压缩文档或应用程序时
	游程长度编码
		游程长度编码可以用来压缩由任何符号组成的数据，它不需要知道字符出现频率的有关知识（赫夫曼编码则需要）
		这种算法的大致思想就是将数据中连续出现的符号用一个字符和这个字符重复的次数代替，例如AAAAAA可以用A06代替
		压缩二进制数时，一般只标记在两个1中间有多少个0来减少数据的位数，为避免额外冗余，应选择一个最佳的位数来计数
		如果用4位代表0的个数，连续的0多于15个，他们将被分为2组或更多的组
		如果第一组是1111，那么默认后面一组仍然表示这两个1之间0的位数，如果刚好有15位是1111，后面一组则紧跟0000
	赫夫曼编码
		在赫夫曼编码中，把出现频繁的字符分配一个较短的编码，把出现较少的字符分配一个较长的编码
		在给每个字符分配位模式前，首先根据每个字符的使用频率给他们分配权值，一旦建立了权值后，就可以根据这些值构造一棵树
		通过以下三个基本步骤可以完成
			将全部字符排成一排，现在每个字符都是树的底层节点
			找出权值最小的两个节点并由他们合成第三个节点，产生一个二层树，新节点的权值是最初两个节点权值相加
				这个节点可以再与其他节点结合
			重复上一步，继续找两个权值最小的节点合成上一个节点，直到各个层上的所有节点结合成一棵树
		树的构造完成后，利用它给各个字符分配编码，给每个分支分配一位，左分支为0，右分支为1
		一个字符的编码这样得到，从根节点开始，沿着分支到达字符所在的位置，各分支位值拼起来就是该字符的编码
		所以出现频率高的字符编码就短，而且在这个编码系统中没有一个编码是其他编码的前缀，3位的编码开头两位不会和两位的编码相等
		这个特性使得赫夫曼编码是一种即时的编码，它的编码和译码可以解释这个问题
		编码
			赫夫曼编码的编码就是根据把每个字符分配的编码按照文档顺序连接起来
		译码
			接受译码十分容易，碰到符合的编码直接翻译成字符，不会有二义性，因为所有的编码都不会是更长的编码的前缀
			这就是赫夫曼编码称为即时码的原因，译码器可以即时的明确的翻译出编码
	Lempel Ziv编码
		LZ编码是称为基于字典的编码的一类算法，它是用其两个发明者的姓命名的，在通信会话中它将产生一个字符串字典，
		如果接受和发送双方都有这样的字典，那么字符串可以由字典中的索引代替，以减少通信的数据传输量
		尽管该方案看起来很简单，但执行起来却有困难，怎样为每一次通信会话产生一个字典
		接收方怎么获得字典，如果发送数据同时发送字典，就增加了额外数据，还不如不压缩
		一个实用的算法就是LZ算法，该算法是基于字典的自适应编码的思想，这种算法有不同版本（LZ77/LZ78等）
		使用LZ算法的简单版本，整个过程分为两个阶段，压缩字符串和解压字符串
		压缩
			这个阶段需要做两件事，建立字典索引和压缩字符串，算法从未压缩的字符串中选择不在字典中的最小字符串
			将它们复制到字典中并分配一个索引值，压缩字符串时，除了最后一个字母，其他的字符被字典中的索引代替
			用索引加最后一个字母的形式插入字符串，比如压缩ABBB，ABB在字典中如果为4，压缩后就是4B
			它的步骤时从原始字符串中选择不在字典中的最小字符串，复制进字典分配索引，然后继续判断后面的字符串
			后面的不在字典中的最小字符串，复制进字典分配索引
			看一下这个字符串有没有可以用索引代替的子串，没有的话直接插入压缩字符串，有的话就把索引加最后一个字符插入压缩字符串
			这里字典仅仅为发送方来创建寻找索引，没有传给接收方，接收方必须自己创建字典
		解压
			解压是压缩的逆过程，按照同样的规则建立起字典最后还原相应的索引号为对应的字符串
			先检测第一个字符串，它肯定是单个字符，把它加入到字典中，后面的索引号一定在前面建立起的字典里有
			这样就可以同样的方式还原出原始的字符串
有损压缩方法
	数据在音频视频等文件中可以接受一部分丢失，因为人体感官分辨不出其中的差别，对于这些情况可以使用有损压缩的办法
	这使得我们能更大限度压缩文件，有关有损压缩的计数已经存在一些成熟的方法，联合图像专家组（JPEG）被用来压缩图片
	运动图像专家组（MPEG）用来压缩视频，MPEG第三代音频压缩格式（MP3）则用来压缩声音
	图像压缩：JPEG
		一幅图像可以用二维数组来表示图像，如果图像只有灰度，一个像素可以由8位来表示，256个灰度级别
		一副640 * 480的灰度图像有307200像素，就需要用2457000位表示，而彩色图片则需要7372800位来表示，这就是为什么需要压缩
		在JPEG中，一副图像将被分成许多8 * 8的像素块，将图像划分成块的目的是减少计算量
		不使用JPEG需要对每个像素运算，要进行307200^2次运算，而使用JPEG则对每个块进行64^2 * 80 * 60次运算
		这将整体的运算量减少到1/4800
		JPEG的整体思想是将图像比那换成一个数的线性集合来揭示冗余，再无损压缩除去它们
		JPEG的大概步骤为：分块，DCT，量化，无损压缩
		离散余弦变换
			在此步骤中，每64个像素块都要用离散余弦变换（DCT）进行变换，这种变换改变64个值且保持相邻像素之间的关系
			但同时还能揭示冗余
			对于所有块同样灰度的图像，经过变换后，我们得到第一个像素的一个非零值T(0,0)，是T(m，n)的其他值的平均值
			T(0,0)这个值又被称为DC值，T(m，n)的值被称为AC值，这个图像灰度值没有变化，所以AC值都为0
			对于两个有两种不同灰度的图，像素的灰度值有一个明显的变化，转换后得到一个非零DC值和少数非零AC值
			对于一个渐变灰度的图，由于不同的灰度值非常多，变换后会得到一个非零DC值和许多非零AC值
		量化
			生成T表后，这些值将被量化以减少需要编码的位数，量化用一个常量来除以位数，然后舍弃小数部分
			这样可以更加减少需要编码的位数，在大多数实现方法中，通过一张量化表定义如何量化每个值
			其中除数取决于T表上的位置，这样可以优化位数和0的个数，量化过程是不可逆的，在这一步丢失掉的信息无法恢复
			这也是JPEG为什么被称为有损压缩
		压缩
			为了把0聚集起来，整个压缩过程以对角线读取表，这样0就会都在最后面，这是由DCT的性质决定的
			JPEG在压缩阶段通常使用游程长度编码来压缩读取的位模式
	视频压缩：MPEG
		这个方法用来压缩视频，一个运动的图像就是一系列快速帧的序列，每个帧都是一幅图像，压缩视频就是对每个帧的压缩
		以及对一系列帧时间上的压缩
		空间压缩
			每一帧都用JPEG（或它的改进版）压缩，每一帧都是一幅图，可以单独压缩
		时间压缩
			在时间压缩中，多余的帧将被丢弃，当我们看电视时大多数连续的帧都是几乎一样的
			为了压缩时间数据，MPEG方法把帧分成三类：I-帧，P-帧，B-帧
			I-帧：内部编码帧
				是一个独立的帧，该帧与其他任何帧无关，它们以周期性间隔出现，而且不能被其他帧构造
			P-帧：预帧
				与前面的I-帧或P-帧有关系，每个P-帧都从前面帧变化而来，P-帧携带的信息比其他帧少
			B-帧：双向帧
				与前面和后续的I-帧和P-帧有关系，每个B-帧斗鱼过去与将来有关系，B-帧不会与另一个B-帧有关系
			译码应该在B-帧前接收到P-帧，所以发送顺序是IPBBPBBI，译码后排序为IBBPBBI
		MPEG有许多版本，上面讨论的是MPEG-1，最近的一个版本是MPEG-7,它叫做多媒体内容描述接口，是用XML描述的标准
	音频压缩
		有两类技术来对音频进行压缩，预测编码和感知编码
		预测编码
			预测编码中，样本间的差别被编码，而不是对所有的样本值编码，这样的压缩方法通常用在语音上
			已经定义的标准有GSM,G.729,G.723.3，这里不详细讨论这些技术
		感知编码
			同来创建CD质量音频最常用的就是基于感知编码技术的，这种类型的音频至少为1.411Mbps
			如果没有压缩，这种数据过去是上传不到因特网的，MP3使用的就是这种技术
			感知编码是基于心理声学的，基于我们听觉系统的瑕疵，有些声音能够掩盖其他声音，这叫频率掩盖
			高音存在和停止后的短时间内，人耳也会被降低灵敏度，这叫时间掩盖
			MP3使用这两种现象来压缩音频信号，把0赋给完全被掩盖的，小数值位赋给部分被掩盖的
			MP3有三种速率，96kbps,128kbps,160kbps