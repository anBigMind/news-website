机器语言
	机器语言是计算机唯一能理解的语言，由0和1组成，每台计算机有其自己的机器语言
汇编语言
	用符号和助记符代替二进制代码
高级语言
	高级语言可以移植到不同的计算机上，它们被转化为机器语言的过程被称为解释或编译
	编译
		编译程序把整个源程序翻译成目标程序
	解释
		在Java之前的解释式语言解释的方法是把程序的每一行翻译乘机器语言并立即执行
		如果出错就显示消息，其余的过程就被终止
		Java的解释方式是先把源程序编译成Java字节码，然后把这些字节码放到虚拟机（JVM）中解释
翻译过程
	编译和解释都要把源代码翻译成目标文件，翻译的过程有如下步骤
	词法分析器
		词法分析器一个符号一个符号的读代码，识别出代码里的助记符
	语法分析器
		语法分析器分析一组助记符，创建出指令
	语义分析器
		语义分析器检查语法分析器创建的句子，确保它们不含有二义性
	代码生成器
		代码生成器把无二义性的指令转化为一组机器语言
过程式模式
	在过程式模式中，我们把程序看作是操纵被动对象的主动主体
	程序使用称为数据或数据项的被动对象
	主动主体调用过程来发出动作操作数据
	程序不定义过程，过程必须已经存在（由语言设计者编写好）
	一些过程式语言
		FORTRAN
			在科学和工程应用中受欢迎的语言
			高精度算法，处理复杂数据的能力，可以指数运算
		COBOL
			淘汰的语言，设计用在商业环境中
			快速访问和更新文件和数据库，生成大量报表，界面友好的格式化输出
		Pascal
			过程式语言的鼻祖
		C
			有结构高级语言应有的所有指令，也有低级指令直接快速的访问硬件，简洁有效，指令短
		Ada
			在工业环境中受欢迎的语言
			有高级指令，允许实时处理，便于过程控制，有并行处理能力，可以在多处理器的主机上运行
面向对象模式
	面向对象模式处理活动对象，文件把所有被文件执行的过程（方法）打包在一起，成为一个对象
	这些过程中有删除，复制，打印等，程序只需要向对象发送请求就可以得到相应的处理
	这些方法被所有同类型的对象共享，也从被这些对象继承的其他对象共享
	面向过程模式中过程是独立的实体，而在面向对象中方法是属于对象的
	类中包含了方法
	方法的格式和过程式语言中的函数差不多
	在面向对象模式中，一个对象能从另一个对象继承
	多态性值我们可以定义一些具有相同名字的操作，而这些操作在不同的类中做不同的事情
函数式模式
	在函数式中程序被看作是一个数学函数，把一组输入映射到一组输出的黑盒子
	函数式语言预定义一系列可供任何程序员调用的原始函数
	函数式语言允许程序员通过若干原始函数的组合创建新的函数
	函数式语言相对于过程式语言有两方面优势，它支持模块化编程并且允许程序员使用已经存在的函数来开发新的函数
	这两个因素使得程序员能够编写出庞大而不易出错的程序
声明式模式
	程序声明事实和规则，用户询问时返回结果
局部变量
	子程序能调用预定义的过程，在局部对象上进行操作，当子程序每次被调用时，这些局部对象或局部变量被创建
	当控制从子程序返回时被销毁，局部对象属于子程序
参数
	子程序仅仅作用于局部对象非常少见，大多数时候主程序需要子程序作用与由主程序创建的一个对象或一组对象
	这时候程序和子程序使用参数，在主程序中称为实际参数，在子程序中称为形式参数
	可以通过两种方式来给子程序传递参数：传值，传引用
	传值
		在传值参数中主程序和子程序创建两个不同的对象（变量），因为作用域不同，所以相应的对象可以有相同或不同的名字
		主程序和子程序的通信是单方向的，从主程序到子程序，主程序传递实际参数的值，存储到子程序相应的形参中
		从子程序到主程序没有参数的通信
		传值是传递变量或对象的值的副本，两个变量或对象里的值互不影响
		传值的优点是子程序仅仅接受的是个值，它不能改变主程序中变量的值
		但是当程序要求子程序这样做时，子程序不能改变主程序中变量的值就成了缺点
	传引用
		传引用被设计来允许子程序改变主程序中变量的值
		在传引用中，两个变量名间传递的是变量值的地址，也就是说实际上一个变量可以被子程序和主程序共享
		相同的变量可能在主程序和子程序中有不同的名字，但是它们所指向的值是同一个，也就是说它们实际上是同一个变量
		主程序可以把值放在变量指向的地址里，子程序也可以通过地址来操作里面的值，并留一个新值给主程序