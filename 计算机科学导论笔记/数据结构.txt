单变量在程序设计语言中被大量使用，但它们不能有效地解决复杂问题，这里讨论三种数据结构，数组、记录和链表
数组
	数组是元素的顺序集合，通常数组中的元素具有相同的数据类型
	在一个数组中有两种标识符，数组的名字和各个元素的名字，数组名是整个结构的名字，元素名是这个名字后跟索引
	多维数组
		数据可以存储在多维中，比如二位数组可以分为行和列存储
	存储配置
		在实际存储设备上的相对位置取决于计算机，有的计算机使用行主序存储，有的计算机使用列主序
	数组操作
		查找
			对未排序的数组使用顺序查找，对已排序的数组使用折半查找，插入、删除、检索都需要用到查找
		插入
			如果语言允许增加数组的大小，那么可以很容易的完成这个操作
			把数组大小增加一位，然后把新数作为最后一项插入
		开始或中间插入
			当需要在一个有序的数组中插入一个新元素是相当麻烦的
			先找到插入的位置，然后把数组增加一位，从尾端挨个把元素向后复制一位
			直到要插入的位置原本的元素被复制到后面一位，然后把需要插入的元素插入该位置
		元素的删除
			删除元素和插入一样麻烦，如果要删除第9个元素，就把第十个及以后的元素从前到后挨个往前复制
			直到第最后一个元素覆盖倒数第二个元素，把数组减小一位
		检索元素
			检索元素就是检查或复制元素中的数据，在数组中这非常方便
			想要检查或复制哪个就用数组名加索引就可以找出
		数组的遍历
			数组的遍历就是被应用于数组上每个元素的操作
	当需要进行的插入和删除操作数目较少，而需要大量的查找和检索操作时，数组是合适的结构
记录
	记录是一组相关元素的集合，它们可能是不同的类型，但整个记录有一个名称，记录中的每个元素称为域
	域是有含义的最小命名数据，它有类型且存在于内存中，域不同于便令主要在于它是记录的一部分
	记录中的元素可以是相同或不同类型，但记录中的所有元素必须是关联的
	记录中的数据必须都与一个对象关联
	数组也可以定义多个集合
链表
	链表是一个数据的集合，其中每个元素包含两部分，数据和链，数据部分包含可用的信息
	链则包含了指向下一个元素的指针（地址），将数据连在一起
	一个指针变量标识该列表中的第一个元素，列表的名字就是该指针变量的名字
	链表中最后一个元素包含一个空指针，表示链表的结束，头指针为空的链表为空链表
	链表中的元素习惯上称为节点
	数组和链表都能表示内存中的数据项列表，在数组中连接工具是索引，元素在内存中是一个接一个无间隔存储的
	链表连接工具是指向下一元素的链，节点的链把数据项胶在一起，这样计算机可以选择连续存储它们或者分开存储
	这样做的优点是在链表中进行插入和删除操作更容易些，只需要改变指向下一元素的指针
	但是这带来了额外的开销，链表的每个节点都有一个额外的域，来存放内存中下一节点的地址
	链表操作
		链表的查找算法只能是顺序的，因为链表中的节点没有特定的名字
		使用两个指针，查找开始时，第一个指针为空，第二个指针指向第一个节点，查找算法将两个指针都向尾部移动一个指针
		如果第二个指针指向的数据等于目标值，算法就结束，第二个指针指向目标值
		如果第二个指针指向的数据大于目标值，且第一个指针小于目标值或为空，算法停止，找不到目标值
		如果第二个指针为空，第一个指针指向的数据小于目标值，目标也无法找到，算法停止
		查找算法被插入算法和删除算法使用，所以需要两个指针
		插入节点
			如果查找到数据则不能插入，因为一般不允许重复值的数据
			如果列表为空，新数据项被作为第一个元素插入，直接让链表头指针指向需要插入的数
			如果没有查找到，且第一个指针为空，就在表的开始处插入
				让头指针指向需要插入的数，给插入的节点的链赋第二个指针的值，让插入的数正确的指向的下一节点
			如果没有查找到，且第二个指针为空，就在表的末尾插入
				把新数据项的地址赋给第一个指针指向的节点的链，然后给新节点的链赋值null代表结束
			如果两个指针都不为空且没有查到，就在表的中间插入
				给新节点的链赋值第二个指针的地址，给第一个指针指向的节点的链赋值新节点的地址
		删除节点
			如果查找到节点则删除，分为两种情况
			删除首节点
				如果第一个指针为空，则删除首节点，给头指针赋值第二个指针指向的节点的地址
			删除中间或末尾节点
				如果两个指针都不为空，则删除中间或末尾节点，给第一个指针指向的节点的链赋值第二个指针指向的节点的链
		检索节点只需要获取第二个指针指向的节点中的数据
		遍历链表需要一个步行指针，开始时指向链表中的首节点，处理数据并把当前节点的链赋值给它，直到它为空为止
	当需要大量的插入和删除，链表是合适的结构，但查找一个链表比查找一个数组要慢，而且需要额外的开销