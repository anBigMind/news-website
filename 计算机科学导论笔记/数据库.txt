数据的存储传统上是使用单独的没有关联的文件，有时称为平面文件，每个应用程序都使用自己的文件
现在所有这些平面文件都被组合成了一个实体----数据库
给出一个适用数据库的定义有些困难，我们通常使用下面的定义
	数据库是一个组织内被应用程序使用的逻辑相一致的相关数据的集合
与平面文件系统相比，数据库系统有以下几个优点
	冗余较少
		在平面文件中同样的一些信息可能保存在多个文件中
	避免不一致性
		如果相同的信息被存储在多个地方，那么修改数据需要修改所有相同的数据，如果漏掉一些，就会造成数据的不一致性
	效率
		数据库通常比平面文件系统的效率高得多，因为数据库中一条信息存储在更少的地方
	数据完整性
		数据库系统更容易维护数据的完整性
	机密性
		如果数据是集中存放在一个地方，就更容易维护信息的机密性
数据库管理系统是定义、创建和维护数据库的一种工具。DBMS也允许用户来控制数据库中数据的存取
数据库管理系统由5部分构成
	硬件
		硬件是允许存取数据的实际的计算机硬件系统，例如主机硬盘工作站
	软件
		软件是允许用户存取、维护和更新物理数据的实际程序，另外软件工具还可以控制哪些用户可以对数据库中的哪部分数据存取
	数据
		数据库中的数据存储在物理存储设备上，在数据库中，数据是独立于软件的一个实体
		这种独立使得可以在不改变物理数据以及存取方式的情况下，更换所应用的软件
	用户
		用户这个术语在数据库管理系统中有广泛的定义，我们可以将用户分成两类，最终用户和应用程序
		最终用户
			最终用户指从数据库中获取信息的用户，可以分为两类，数据库管理员和普通用户
		应用程序
			数据库中数据的其他使用者就是应用程序，应用程序需要存取和处理数据
	规程
		规程是必须被明确定义并为数据库用户所遵循的规程或规则的集合
数据库体系结构
	美国国家标准协会/标准计划和需求委员会为数据库管理系统建立了三层体系结构：内层、概念层和外层
	内层
		内层决定了数据在存储设备中的实际位置，这个层次处理低层次的数据存取方法和如何在存储设备间传输字节
		换句话说内层直接与硬件交互
	概念层
		概念层定义数据的逻辑视图，在该层中定义了数据的模式，数据库管理系统的主要功能都在该层
		概念层是中介层，它使得用户不必与内层打交道
	外层
		外层直接与用户交互，它将来自概念层的数据转化为用户熟知的格式或视图
数据库模型
	数据库模型定义了数据的逻辑设计，也描述了数据不同部分间的联系，历史上用过三种模型，层次模型、网状模型和关系模型
	层次模型
		层次模型中数据被组织成一棵树，层次模型已经过时
	网状模型
		网状模型中实体通过图来组织，部分实体可以通过多条路径访问，没有层次关系，这种模型也已经过时
	关系模型
		关系模型中，数据组织成称为关系的二维表，没有任何层次或网格结构强加于数据上，如今关系模型是最常用的模型
关系数据库模型
	数据的外部视图就是关系或表的集合，但这并不代表数据以表的形式存储，数据的物理存储与数据的逻辑组织方式毫无关系
	关系数据库管理系统中的关系有下列特征：
		名称：在关系数据库管理系统中，每一种关系都具有唯一的名称
		属性：关系中的每一列都称为属性，属性在表中是列的头，每一个属性表示了存储在该列下的数据的含义
			表中的每一列有唯一的名称，关系中属性的总数称为关系的度，属性名并不存在数据库中
		元组：关系中的行叫元组，元组定义了一组属性值，关系中元组的个数叫关系的基数
	关系的操作本节中定义了9种，插入、删除、更新、选择、投影、连接、并、交和差，我们描述它们在SQL中的定义
		结构化查询语言是美国国标协会和国际标准化组织用于关系数据库的标准语言。这是一种描述性的语言
		意味着不用一步步编写而只需声明它，结构化查询语言于1979首次被Oracle公司实现，之后有了更多的新版本
		插入
			插入是一元操作它应用于一个关系，作用是在关系中插入新的元素
		删除
			删除也是一元操作，根据要求删除表中相应的元组
		更新
			更新也是一元操作，它应用于一个关系，用来更新元组中的部分属性值
		选择
			选择也是一元操作，它应用于一个关系并产生另外一个新关系，新关系中的元组是原关系元组的子集
			选择操作根据要求从原关系中选择部分元组
		投影
			投影也是一元操作，它应用于一个关系并产生另外一个新关系，新表中的属性是原关系中的子集
			投影操作所得到的新关系中的元组属性减少，但元组的的数量保持不变
		连接
			连接是二元操作，它基于共有的属性把两个关系组合起来
		并
			并也是二元操作，它将两个关系合并成一个新的关系
			不过这里对两个关系有一个限制，即它们必须拥有相同的属性，等于属性不变，把元组放在了一起
		交
			交也是二元操作，它对两个关系操作，生成一个新关系，和并操作一样，两个关系必须有相同属性
		差
			差也是二元操作，它应用于具有相同属性的两个关系
			生成的关系中的元组是存在于第一个而不存在于第二个关系中的元组
		语句的组合
			SQL语言允许我们组合前面介绍的语句，从数据库中抽取出更复杂的信息
数据库的设计
	数据库的设计是一个冗长且只能一步步来完成的任务，第一步通常是收集需要存储的信息以及存取需求
	第二步就是建立一个实体关系模型（ERM），这种模型定义了其中一些信息需要维护的实体，这些实体的属性和他们的关系
	设计的下一步是基于使用的数据库类型的，在关系数据库中，下一步就是建立基于ERM的关系和规范化这些关系
	实体关系模型
		在这一步数据库设计者建立实体关系(E-R)图来标识那些其信息需要保存的实体和实体间的关系
		E-R图使用了多种几何图形，这里只介绍其中一部分
			矩形表示实体集
			椭圆表示属性
			菱形表示关系集
			线连接属性和实体集以及实体集和关系集
		关系可以是一对一，一对多，多对多，多对一，关系集合也可以有实体
	从E-R图到关系
		E-R图完成后，关系数据库中的关系就能建立了
		实体集上的关系
			对于每个实体集，我们都创建一个关系（表），这些关系有n个列，对应这个集合定义的n个属性
		关系集上的关系
			每个关系集，我们创建一个关系（表），这个关系中有一个列对应于这个关系所涉及的实体集的关键字
			如果关系有属性，这个关系还可以有关系本身的属性所对应的列
	规范化
		规范化是个处理过程，通过此过程给定的一组关系转化成一组具有更坚固结构的新关系
		规范化过程定义了一组层次范式（NF），多种范式已经被提出，包括1NF,2NF,3NF,BCNF,4NF,PJNF,5NF等
		这些范式形成了一个层次结构，如果一个数据库中的关系是3NF，那么它首先应该是2NF
		第一范式（1NF）
			当我们把实体或关系转换成表格式的关系时，可能有些关系的行或列的交集有多个值
			也就是一个关系中的一个元组对应另一个关系中的多个元组
			这个问题可以通过重复对应多个元组的那个元组的属性来进行规范化
		第二范式（2NF）
			在每个关系中我们需要有一个关键字（称为主键），所有其他的属性（列值）都依赖于它
			我们可以有一些复合关键字，如果每个非关键字属性都依赖于整个复合关键字，那么这个关系就是第二范式的
			如果有些属性只依赖于复合关键字的一部分，那这个关系就不是第二范式的
			一个不是第二范式的关系可能遇到问题，例如如果一个学生关系有四个属性，ID，成绩，课程，名字
			如果缺少任何一项都无法添加到数据库中
		其他范式使用属性间更复杂的依赖关系，这里不介绍
其他数据库模型
	关系数据库并不是当今唯一通用的数据库模型，另两种通用模型是分布式数据库和面向对象数据库
	分布式数据库
		它基于关系模型，只不过数据库中的数据存储在一些通过因特网通信的计算机上，每台计算机拥有部分或全部数据
		不完全的分布式数据库
			数据是本地话的，本地使用的数据存储在相应的站点上，但这并不意味一个站点不能访问其他站点的数据
			虽然站点对本地数据有完全控制权，但通过因特网还存在一个全局的控制
			例如一家公司在许多城市有许多个站点，每个站点都有一个数据库存储自己的雇员信息，但是中心人事部门能控制所有数据库
		复制式的分布式数据库
			每个站点都有其他站点的一个完全副本，对一个站点数据的修改将会在其他站点上重复
			如果一个站点出了问题，用户可以访问其他站点的数据，等于是多个站点备份一份数据
	面向对象数据库
		当今很多应用程序要求以另一种方式看待数据，有些应用程序把数据看作结构，例如由域构成的记录
		面向对象数据库试图保留关系模型优点的同时允许应用存取结构化数据
		在面向对象数据库中，定义了对象和他们的关系，另外，每一个对象可以有属性并以域的形式表达
		XML
			通常用作面向对象数据的查询语言是XML，它能用嵌套结构表示数据