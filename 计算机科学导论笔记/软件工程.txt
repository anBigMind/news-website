软件生命周期内，程序需要不断的被使用和修改，直到软件过时
开发过程模型
	开发过程包括四个阶段，分析、设计、实现、测试
	瀑布模型
		前一个阶段不结束，后一个阶段不开始，优点是在下一个阶段开始前前面的阶段已经完成
		方便开发小组准确知道自己要做的事情，缺点是难以定位问题，如果过程的一部分有问题
		就必须检查整个过程
	增量模型
		开发者先完成整个系统的一个简化版本，随后一个版本一个版本的增加细节和功能
		在每个版本的开发中都重复以上四个过程
分析阶段
	分析阶段需要生成规格说明文档，这个文档说明了软件要做什么，而没有说明如何去做
	面向过程分析用数据流图，实体关系图和状态图分析
	面向对象分析用用例图，类图，状态图分析
设计阶段
	设计阶段定义系统如何完成在分析阶段所定义的需求
	面向过程设计用结构图和模块化设计，耦合是对两个模块绑定紧密程度的度量，必须最小化，内聚式处理过程相关紧密程度的量，必须最大化
	面向对象设计阶段列出类中属性和方法的细节
实现阶段
	在这个阶段，程序员为模块或类编写程序
	软件质量
		软件质量能够分为三个广义的度量，可操作性、可维护性和可迁移性
		可操作性有多种度量方法，准确性、高效性、可靠性、安全性、及时性、适用性
		可维护性以保持系统正常允许并及时更新为参照，分为可变性、可修正性、适应性、可测试性
		可迁移性指把数据或系统从一个平台移动到另一个平台并重用代码的能力，分为重用性，互用性，可移植性
测试阶段
	白盒测试
		白盒测试基于直到软件内部结构
		至少需要满足下面4条标准
		每个模块中所有独立路径至少被测试过一次
		所有的判断结构每个分支都被测试
		每个循环被测试
		所有数据结构都被测试
		基本路径测试创建一组测试用例，找到必须被走过的独立路径，从而保证软件中每条语句至少被执行一次
		控制结构测试比基本路径测试更容易理解并且包含基本路径测试
			条件测试用于模块中的条件表达式，分为简单条件（关系表达式）和复合条件（关系表达式和逻辑运算符），检查是否所有的条件都被正确设置
			数据流测试基于通过模块的数据流，选择测试用例，检查被用在赋值语句左边的变量的值
			循环测试使用测试用例检查循环的正确性，所有类型的循环被测试
	黑盒测试
		黑盒测试不知道程序的内部也不知道程序是怎样工作的，按照软件应该完成的功能来测试软件
		穷尽测试
			用输入域中所有可能的值去测试软件，但是基本实现不了
		随机测试
			选择输入域中随机的子集来测试
		边界值测试
			输入各种判断的边界值来测试
文档
	软件的正确使用和有效维护离不开文档，通常软件有三种文档，用户文档，系统文档和技术文档，软件有任何变更也要写文档
	用户文档
		它告诉用户如何一步步的使用软件，通常包含一个教程
	系统文档
		系统文档定义软件本身，撰写系统文档是为了让原始开发人员之外的人能够维护和修改软件包
		在分析阶段，手机的信息应该仔细地用文档记录，应该定义信息的来源，需求，和选用的方法
		在设计阶段，最终版本中用到的工具必须记录在文档中，如果结构图修改了多次，应该用完整的注释记录在案
		在实现阶段，代码的每个模块都应记录在文档中，另外代码应该用注释和描述尽可能解释清楚
		测试阶段的文档应该记录对产品所用的每种测试，连同所有结果都要记录在案
	技术文档
		技术文档描述了软件系统的安装和服务，安装文档描述了软件如何安装，服务文档描述了系统应该如何维护更新