简单语言
	我们可以仅仅用三条语句来定义一种语言，他们是：递增语句，递减语句，循环语句
	可以证明只使用这三种语句的简单程序设计语言和我们现在使用的任何一种复杂语言一样强大
	我们可以用这三条语句来构建一个宏来模拟当今高级语言中所有的语句
图灵机
	图灵机由三部分组成，磁带，控制器和读写头
	磁带
		尽管现实中计算机随机存储设备的容量是有限的，但我们假定图灵机中的内存是无限的，磁带任何时候只能保存一系列顺序字符
	读写头
		读写头任何时刻总是指向磁带上的一个符号，我们称这个符号为当前符号，读写头每次在磁盘上读写一个符号，每读写完一次
		它向左或向右移，读写和移动都是在控制器指令下进行的
	控制器
		控制器是理论上功能作用类似于现代计算机中央处理单元的一个部件，它是一个有限状态自动机，该机器有预定的有限个状态
		并能根据输入从一个状态转移到另一个状态，但只能处于这些状态的一种
	对简单语言的模拟
		把图灵机设计为只能进行一元算术，磁带仅能存储空白和数字一两种符号，一元算术中，正整数仅由1组成，4是1111，3是111
		这样我们就能给这个图灵机编写程序来实现简单语言的语句了
	邱奇-图灵议题
		如果存在一个能完成一个符号操纵任务的算法，那么也存在一台能够完成这个任务的图灵机
		基于这样的观点，能用写一个算法来完成的任何符号操纵任务都可以由图灵机来完成，但是这个论题在数学上无法证明
		但有些强有力的论断在支持它，尚未发现图灵机不能模拟的算法，其次，所有在数学上已经得到证明的计算机模型都与图灵机等价
哥德尔数
	在计算机科学理论中，一个无符号数能被分配给任何用特定语言编写的程序，通常称为哥德尔数
	这种分配有很多优点，首先，程序可以作为单一数据输入给其他程序，第二，程序可以通过它的整数来表示引用
	第三，该编号方式可以用来证明有一些问题计算机并不能解决
停机问题
	几乎所有的程序都包含某种形式的重复，一个重复结构可能永远都不会结束，一个典型的编程问题就是
	我们能编写一个程序来测试任何可以用哥德尔数表示的程序是否会终止吗
	该程序的存在将会大量节省编程人员的时间，不幸的是，哥德尔不完备定理已经证明了这样的程序不存在
	哥德尔不完备定理证明了总有一个公式有可能产生矛盾，既是真的又是假的，所以停机问题不可解
问题的复杂度
	既然我们已经证明了至少有一个问题计算机无法解决，那么让我们在这个问题进一步深入，一般来说问题可以分为两类，可解问题和不可解问题
	可解问题又分为两种，多项式问题和非多项式问题
	不可解问题
		要证明一个问题是无法解决的，方法就是证明如果它可以解决，那么停机问题就也可以解决
	可解问题
		能够被计算机解决的问题和不可解决的问题一样，都是无穷无尽的，平常我们关心的是：计算机需要花多长时间去解决
		一个问题，换言之，这个问题有多复杂
		可解问题的复杂度
			衡量可解问题复杂度的一个方法是找出计算机运行该程序时要执行的运算数量，这样复杂度问题就不是依赖于
			运行程序的计算机的速度，而是输入的数目
		大O表示法
			相对于当今计算机的速度，我们关心的是程序总体的数量级而不是精确的数字
			效率的简化以大O表示法最为著名，在这里我们只给出该表示法的思想而不深入研究定义和计算
			在该表示法中，运算数量表示为输入量的函数，符号O(n)表示有n个输入，执行n次运算
			符号O(n^2)表示有n个输入，执行n^2次运算
		多项式问题
			如果程序的复杂度为O(log n)，O(n^2)，O(n^k)这样的形式，则被称为多项式问题，一当今计算机的处理速度，
			对于一个有合理输入数量的多项式问题我们都能解决
		非多项式问题
			如果一个程序的复杂度远比多项式问题复杂，例如O（10^n）或O（n！），当输入数很小时这种问题可以解决
			如果输入数很大，则需要坐在计算机面前等上几个月的时间才能看到非多项式问题的解决结果
			随着计算机技术的不断发展，我们也许能在更短的时间内解决非多项式问题