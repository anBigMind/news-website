文件存储在辅助存储设备或称二级存储设备中，两种最常见的二级存储设备是磁盘和磁带，文件在二级存储设备中是可读写的
文件也可以以计算机只能写不能读的形式存在，例如屏幕上显示的信息，广义上键盘也是文件，虽然它不能存储数据
文件时数据记录的集合，每一个记录由一个域或多个组成
在设计文件时，关键问题是如何从文件中检索信息，存取方法决定了怎样检索记录：顺序的或随机的
顺序存取
	如果需要一个接一个的存取记录，使用顺序文件结构
随机存取
	如果想存取某一特定记录二不用检索其之前的所有记录，则使用允许随机存取的文件结构
	有两种文件结构都允许随机存取，索引文件和散列文件
顺序文件
	顺序文件中，记录被一个接一个的存储到存储器中，并在最后的记录后加上EOF（end of file）标志
	操作系统不知道有关记录地址的信息，它只知道记录是一个挨着一个存取的
	顺序文件用于需要从头到尾存取记录的应用，这种情况顺序文件比随机文件更加简便有效
	但是顺序文件对于随机存取效率很低，必须挨个查找
更新顺序文件
	顺序文件需要定期更新以反映信息的变化，更新过程非常棘手，
	和更新程序有关的一共有4个文件，新主文件，旧主文件，事务文件和错误报告文件，所有这些文件根据关键字被分类
	新主文件
		新的永久数据文件通常称为新主文件
	旧主文件
		它是需要更新的永久文件，即使在更新后，旧主文件作为参考将继续保留
	事务文件
		第三种是事务文件，它的内容包含将要对主文件做的改变，在所有的文件更新中，一共有三种基本类型的改变
		添加事务包含将要追加到主文件中的新数据，删除事务把将要从文件中删除的记录标识出来
		更改事务则包含对文件中特定记录的修改，要处理这些事物就需要键，键就是文件中一个或多个能唯一标识数据的字段
	错误报告文件
		在更新过程中难免不出错误，当错误发生时，应向用户报告错误，错误报告应该包括在数据更新是所发现的错误的清单
		并且提供给用户纠错操作，另外还要描述能导致错误的一些情况
文件更新过程
	要使文件更新过程有效率，所有的文件都必须按同一个键来排序
	如果事务文件的键小于主文件的键，事务就是一个增加，把事务文件的数据追加到主文件前面
	如果事务文件的键与主文件相同，则判断事务是什么，如果是修改，修改对应主文件数据，如果是删除，将数据从主文件中删除
	如果事务文件的键大于主文件的键就把旧主文件写入新主文件，等于在后面加上了新的数据
	有几种情况可能产生一个错误，错误被记录在错误报告文件中
		如果事务定义追加一个就文件中已经存在的记录
		如果事务定义删除或修改一个旧主文件中不存在的记录
索引文件
	在文件中随机存取记录，需要知道记录的地址，例如一个人想要查询银行账号，客户和出纳都不知道客户记录的地址
	索引文件就可以把账号（键）和地址关联起来
	索引文件由数据文件组成，它是带索引的顺序文件，索引本身很小，基于数据文件的关键字值排序
	存取文件中的记录需要按照以下步骤
		整个索引文件都载入内存中
		搜索项目，用高效的算法查找目标键
		检索记录的地址
		按照地址检索数据记录并返回给用户
	倒排文件
		索引文件的好处之一就是可以有多个索引，每个索引有不同的键，这种索引文件被称为倒排文件
散列文件
	在索引文件中，索引将键映射到地址，散列文件用一个数学函数来完成映射
	用户给出键，函数将键映射成地址，再传送给操作系统，这样就可以检索记录了
	散列文件不需要额外的索引文件，再索引文件中，必须将文件的索引保存在磁盘上，当需要处理数据时，先把索引导入内存中
	搜索索引找到地址，再访问数据文件存取记录，在散列文件中，用函数来寻找地址，这里不需要索引和随之而来的的所有开销
	但是散列文件自身也存在一些问题
	散列方法
		在键-地址映射中，可以选择多种散列方法的一种
		直接散列法
			直接散列法中键就是数据文件的地址，文件因此必须对每个可能的键都包含一个记录
			也就是键可能的范围内都要留着空间，最终存储不一定能用到一些地址
			直接散列用的很少，但很有用，它可以保证没有其他方法所存在的同义词和冲突问题
			这是一种理想的方法，实际应用非常有限
		求模法
			用键求模列表大小，得到的余数+1作为地址，列表大小为素数可能产生更少的冲突
		数字析取散列法
			数字析取散列法就是从键中取特定位数的数字作为地址
		除这些之外还有其他流行的方法，像平方中值法、折叠法，旋转法和伪随机法
冲突
	通常散列列表里键的数量比在数据文件中记录的数量要多，比如用两位数当键标识一个元素，那么就需要100个地址来存放可能的键
	而实际上可能只有五十个元素需要被存储，在散列文件中有可能有多个键对应同一个地址，我们把列表中映射为同一地址的键称为同义词
	如果插入列表的实际数据中有两个或多个同义词，将产生冲突，冲突的产生是散列算法为插入键产生地址时，发现该地址已经被占用
	由散列算法产生的地址称为内部地址，包含所有内部地址的区域称为主区
	当两个键在内部地址上冲突时，必须将其中的一个键和数据存储到主区外另一个地址单元中来解决冲突
	冲突解决法
		除了直接法，所讨论过的散列方法没有一种能建立一一对应的关系，这就意味着有可能产生冲突
		有几种方法来解决冲突，每种都不依赖于散列算法，任何散列方法都可以用于冲突解决法
	开放寻址
		开放寻址解决法，解决了在主区的冲突，当一个冲突发生时主区地址将查找开放的或空闲的记录来存放新数据
		对于产生冲突的数据，开放寻址解决法把该数据存储在映射出的地址的下一个地址去，（原地址+1）
	链表解决法
		开放寻址的一个主要缺点就是每个冲突的解决增加了将来冲突的可能性，这个弊端可以由链表解决法解决
		在这种方法中，最先存储到一个地址中的记录，包含了指向下一条产生冲突的记录的指针
	桶散列法
		另一种处理冲突的方法是散列到桶，桶是一个能接纳多个记录的节点，比如一个地址含有三个空间可以存储记录
		这种方法的缺点是浪费很多存储单元，一个地址如果没有其他冲突文件，也会保留两个空间
	组合方法
		有很多中方法可以用来解决冲突，正如散列方法一样，复杂的实现方法通常是组合使用多种方法
目录
	目录大多是操作系统提供的，用来组织文件，目录完成的功能像是档案柜中的文件夹一样
	但是在大多数操作系统中，目录被表示为含有其他文件信息的一种特殊文件类型，目录的作用不仅仅像索引文件
	它不光告诉操作系统文件在辅助存储设备上的位置，还包含了关于它所包含的其他文件的其他信息
	例如谁有访问的权限，文件被创建、存储和修改的日期
	在大多数操作系统中，目录被组织成像树的抽象数据类型
	UNIX操作系统中的目录
		在UNIX中有4种在目录结构种起着非常重要作用的特殊目录类型：根目录，主目录，工作目录和父目录
		根目录
			根目录是文件系统层次的最高层，它是整个文件结构的根，因此没有父目录
			在UNIX环境中，根目录总是有几层子目录，根目录属于系统管理员，只有系统管理员能够修改它
		主目录
			一个用户登录到系统中时，使用一个主目录，主目录包含我们在其中创建的任何文件，可能还包含个人系统文件
			主目录也是个人目录结构的开始，每个用户都有一个主目录
		工作目录
			工作目录又称当前目录，工作目录就是当前使用的目录
		父目录
			父目录时工作目录的直接上层目录，当我们在我们的主目录中时，它的父目录就是系统目录中的一个

	路径和路径名
		文件系统的每个目录和文件都必须有一个名字，有些文件与其他目录中的文件可以有一样的名字
		所以为了唯一的标识一个文件，我们需要指明从根目录到文件的文件路径，文件路径由它的绝对路径名来指明
		绝对路径可能很长，所以UNIX提供了相对路径，它是相对于工作目录的路径
		我们在一个目录中时，可以通过相对路径名来选择一个文件，可以省略掉工作目录的上级目录的路径
文本文件与二进制文件
	存储在存储设备上的文件是一个位的序列，可以被应用程序翻译为一个文本文件或是二进制文件
	文本文件
		文本文件是一个字符文件，在他们的内存储器格式中不能包含正数，浮点数或其他数据结构
		要存储这些类型的数据，必须把它们转换成对应的字符格式
		一些文件只能用字符数据格式，这也是编程语言中为什么需要特殊的函数来格式化输入输出设备的数据
	二进制文件
		二进制文件是计算机内部格式存储的数据集合，在这种定义中，数据可以是整型，浮点型或其他数据结构，除了文件
		二进制文件中的数据只有当被程序正确的解释时才有意义，这也是编程语言中规定不同数据类型的原因